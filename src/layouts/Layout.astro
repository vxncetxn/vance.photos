---
import "../styles/global.css";
const { title, route } = Astro.props;
import CanvasControlFlow from "../components/CanvasControlFlow.svelte";
import Progress from "../components/Progress.svelte";
---

<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <title>{title}</title>
    <script>
      import barba from "@barba/core";
      import { animate } from "motion";
      import imagesLoaded from "imagesloaded";
      import { progress } from "../stores/progress";

      barba.init({
        views: [
          {
            namespace: "index",
            beforeEnter() {
              document.body.style.overflow = "auto";
            },
            afterEnter() {
              let customEv = new CustomEvent("pagechange");
              customEv["pathname"] = "";
              customEv["domImages"] = undefined;
              window.dispatchEvent(customEv);
            },
          },
          {
            namespace: "collection",
            beforeEnter() {
              document.body.style.overflow = "hidden";
            },
            afterEnter() {
              let customEv = new CustomEvent("pagechange");
              const preloadImages = new Promise((resolve, reject) => {
                imagesLoaded(
                  document.querySelectorAll(".image"),
                  { background: true },
                  resolve
                );
              });
              Promise.all([preloadImages]).then(() => {
                let domImages = [...document.querySelectorAll(".image")].map(
                  (img) => {
                    const bounds = img.getBoundingClientRect();
                    const url = new URL(img.src);
                    return {
                      src: url.origin + url.pathname,
                      top: bounds.top,
                      left: bounds.left,
                      width: bounds.width,
                      height: bounds.height,
                    };
                  }
                );

                customEv["pathname"] = new URL(
                  window.location.href
                ).pathname.slice(1);
                customEv["domImages"] = domImages;
                window.dispatchEvent(customEv);
              });
            },
          },
        ],
        transitions: [
          {
            name: "loading",
            async once() {
              progress.set(progress.get() + 31.5);

              let loadOutTexts = document.querySelectorAll(".load-out-text");
              let loadInTexts = document.querySelectorAll(".load-in-text");

              await new Promise((resolve) => {
                const intervalId = setInterval(() => {
                  if (progress.get() >= 100) {
                    resolve(clearInterval(intervalId));
                  }
                }, 200);
              });

              await animate(
                loadOutTexts,
                {
                  transform: "translateY(120%)",
                  display: "none",
                },
                { duration: 0.8 }
              ).finished;
              return animate(
                loadInTexts,
                { transform: ["translateY(-120%)", "translateY(0)"] },
                { duration: 0.8 }
              ).finished;
            },
          },
          {
            name: "sun-from-index",
            from: {
              namespace: ["index"],
            },
            leave() {
              let sunOne = document.querySelector(".sun-one");
              let sunTwo = document.querySelector(".sun-two");
              let texts = document.querySelectorAll(".mo-text");

              animate(
                sunOne,
                {
                  transform: "translate(-50%, -50%)",
                },
                {
                  duration: 1.6,
                  easing: [0.2, 0.125, 0, 0.73],
                }
              ).finished.then(() => {
                // sunOne.style.animation =
                //     'throb-collection-one 8s cubic-bezier(0.2, 0.125, 0, 0.73) alternate infinite';
              });

              animate(
                sunTwo,
                {
                  transform: "translate(-20%, -20%)",
                },
                {
                  duration: 1.6,
                  easing: [0.2, 0.125, 0, 0.73],
                }
              ).finished.then(() => {
                // sunTwo.style.animation =
                //     'throb-collection-two 10s cubic-bezier(0.2, 0.125, 0, 0.73) alternate infinite';
              });

              return animate(
                texts,
                {
                  transform: "translateY(120%)",
                },
                { duration: 0.8 }
              ).finished;
            },
            enter(data) {
              let texts = data.next.container.querySelectorAll(".mo-text");

              animate(
                texts,
                { transform: ["translateY(-120%)", "translateY(0)"] },
                { duration: 0.8 }
              );
            },
          },
          {
            name: "sun-from-collection",
            from: {
              namespace: ["collection"],
            },
            leave() {
              let sunOne = document.querySelector(".sun-one");
              let sunTwo = document.querySelector(".sun-two");
              let texts = document.querySelectorAll(".mo-text");

              animate(
                sunOne,
                {
                  transform: "translate(45%, 45%)",
                },
                {
                  duration: 1.6,
                  easing: [0.2, 0.125, 0, 0.73],
                }
              ).finished.then(() => {
                // sunOne.style.animation = 'throb-index-one 8s cubic-bezier(0.2, 0.125, 0, 0.73) alternate infinite';
              });

              animate(
                sunTwo,
                {
                  transform: "translate(90%, 20%)",
                },
                {
                  duration: 1.6,
                  easing: [0.2, 0.125, 0, 0.73],
                }
              ).finished.then(() => {
                // sunTwo.style.animation = 'throb-index-two 10s cubic-bezier(0.2, 0.125, 0, 0.73) alternate infinite';
              });

              return animate(
                texts,
                {
                  transform: "translateY(120%)",
                },
                { duration: 0.8 }
              ).finished;
            },
            enter(data) {
              let texts = data.next.container.querySelectorAll(".mo-text");

              animate(
                texts,
                { transform: ["translateY(-120%)", "translateY(0)"] },
                { duration: 0.8 }
              );
            },
          },
        ],
      });
    </script>
  </head>
  <body
    data-barba="wrapper"
    class={`overscroll-none ${route === "collection" ? "overflow-hidden" : ""}`}
  >
    <nav
      class="fixed z-10 flex flex-col space-y-4 right-20 top-16 text-slate-50 mix-blend-difference"
    >
      <div class="overflow-hidden">
        <a href="#"
          ><p class="font-sans text-xl capsize load-in-text">vancetan</p>
        </a>
      </div>
      <div class="overflow-hidden">
        <a href="#"
          ><p class="font-sans text-xl capsize load-in-text">Twitter</p>
        </a>
      </div>
      <div class="overflow-hidden">
        <a href="#"
          ><p class="font-sans text-xl capsize load-in-text">Email</p>
        </a>
      </div>
    </nav>
    <slot />
    <Progress client:idle />
    <CanvasControlFlow client:idle />
  </body>
</html>
