diff --git a/src/core/Renderer.js b/src/core/Renderer.js
index 880408bbe56f3ca91d09e89ad524f254f3e80a9f..69b898bfbba78841c6b7459355791a10274d7068 100644
--- a/src/core/Renderer.js
+++ b/src/core/Renderer.js
@@ -112,10 +112,12 @@ export class Renderer {
         this.gl.canvas.width = width * this.dpr;
         this.gl.canvas.height = height * this.dpr;
 
-        Object.assign(this.gl.canvas.style, {
-            width: width + 'px',
-            height: height + 'px',
-        });
+        if (this.gl.canvas.style) {
+            Object.assign(this.gl.canvas.style, {
+                width: width + 'px',
+                height: height + 'px',
+            });
+        }
     }
 
     setViewport(width, height, x = 0, y = 0) {
diff --git a/src/extras/TextureLoader.js b/src/extras/TextureLoader.js
index 5b43411ee025c828c15d11ac8e186a28bea71afd..a38c317e1a5fb2199443d4e56d2b89cb0b76b779 100644
--- a/src/extras/TextureLoader.js
+++ b/src/extras/TextureLoader.js
@@ -96,6 +96,7 @@ export class TextureLoader {
                 });
                 texture.loaded = this.loadKTX(src, texture);
                 break;
+            case 'avif':
             case 'webp':
             case 'jpg':
             case 'jpeg':
@@ -139,11 +140,8 @@ export class TextureLoader {
 
         for (const ext in extensions) if (extensions[ext]) supportedExtensions.push(ext);
 
-        // Check for WebP support
-        if (detectWebP()) supportedExtensions.push('webp');
-
         // Formats supported by all
-        supportedExtensions.push('png', 'jpg');
+        supportedExtensions.push('png', 'jpg', 'jpeg', 'webp', 'avif');
 
         return supportedExtensions;
     }
@@ -164,6 +162,7 @@ export class TextureLoader {
             }
 
             texture.image = imgBmp;
+            imgBmp.src = src;
 
             // For createImageBitmap, close once uploaded
             texture.onUpdate = () => {
@@ -180,10 +179,6 @@ export class TextureLoader {
     }
 }
 
-function detectWebP() {
-    return document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;
-}
-
 function powerOfTwo(value) {
     // (width & (width - 1)) !== 0
     return Math.log2(value) % 1 === 0;
@@ -192,11 +187,11 @@ function powerOfTwo(value) {
 function decodeImage(src, flipY) {
     return new Promise((resolve) => {
         // Only chrome's implementation of createImageBitmap is fully supported
-        const isChrome = navigator.userAgent.toLowerCase().includes('chrome');
-        if (!!window.createImageBitmap && isChrome) {
+        const isChromeOrFirefox = navigator.userAgent.toLowerCase().includes('chrome') || navigator.userAgent.toLowerCase().includes('firefox');
+        if (isChromeOrFirefox) {
             fetch(src, { mode: 'cors' })
-                .then(r => r.blob())
-                .then(b => createImageBitmap(b, { imageOrientation: flipY ? 'flipY' : 'none', premultiplyAlpha: 'none' }))
+                .then((r) => r.blob())
+                .then((b) => createImageBitmap(b, { imageOrientation: flipY ? 'flipY' : 'none', premultiplyAlpha: 'none' }))
                 .then(resolve);
         } else {
             const img = new Image();